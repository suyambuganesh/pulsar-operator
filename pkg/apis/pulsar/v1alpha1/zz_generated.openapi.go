// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Bookie":              schema_pkg_apis_pulsar_v1alpha1_Bookie(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Broker":              schema_pkg_apis_pulsar_v1alpha1_Broker(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage":      schema_pkg_apis_pulsar_v1alpha1_ContainerImage(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Grafana":             schema_pkg_apis_pulsar_v1alpha1_Grafana(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Manager":             schema_pkg_apis_pulsar_v1alpha1_Manager(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Monitor":             schema_pkg_apis_pulsar_v1alpha1_Monitor(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.MonitorIngress":      schema_pkg_apis_pulsar_v1alpha1_MonitorIngress(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy":           schema_pkg_apis_pulsar_v1alpha1_PodPolicy(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Prometheus":          schema_pkg_apis_pulsar_v1alpha1_Prometheus(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Proxy":               schema_pkg_apis_pulsar_v1alpha1_Proxy(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarCluster":       schema_pkg_apis_pulsar_v1alpha1_PulsarCluster(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterSpec":   schema_pkg_apis_pulsar_v1alpha1_PulsarClusterSpec(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterStatus": schema_pkg_apis_pulsar_v1alpha1_PulsarClusterStatus(ref),
		"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Zookeeper":           schema_pkg_apis_pulsar_v1alpha1_Zookeeper(ref),
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Bookie(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Bookie defines the desired state of Bookie",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the  container image. default is apachepulsar/pulsar-all:latest",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the bookie cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size (DEPRECATED) is the expected size of the bookie cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod defines the policy to create pod for the bookie cluster.\n\nUpdating the pod does not take effect on any existing pods.",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"),
						},
					},
					"storageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage class name\n\nPVC of storage class name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"journalStorageCapacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage request capacity(Gi unit) for journal",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"ledgersStorageCapacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage request capacity(Gi unit) for ledgers",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Broker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Broker defines the desired state of Broker",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the  container image. default is apachepulsar/pulsar-all:latest",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the broker cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size (DEPRECATED) is the expected size of the broker cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod defines the policy to create pod for the broker cluster.\n\nUpdating the pod does not take effect on any existing pods.",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_ContainerImage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerImage defines the fields needed for a Docker repository image. The format here matches the predominant format used in Helm charts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"pullPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Grafana(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pulsar cluster grafana spec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host (DEPRECATED) is the expected host of the pulsar grafana.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePort (DEPRECATED) is the expected port of the pulsar grafana.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Manager(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Manager defines the desired state of Manager",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "Is enable pulsar cluster manager flag.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the  container image. default is apachepulsar/pulsar-all:latest",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the broker cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"userName": {
						SchemaProps: spec.SchemaProps{
							Description: "User Name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"userPassword": {
						SchemaProps: spec.SchemaProps{
							Description: "User Password",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host (DEPRECATED) is the expected host of the pulsar manager.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress additional annotation",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePort (DEPRECATED) is the expected port of the pulsar manager.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Monitor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Monitor defines the desired state of Monitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "Is enable pulsar cluster monitor flag.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Prometheus",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Prometheus"),
						},
					},
					"grafana": {
						SchemaProps: spec.SchemaProps{
							Description: "Grafana",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Grafana"),
						},
					},
					"ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.MonitorIngress"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Grafana", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.MonitorIngress", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Prometheus"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_MonitorIngress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MonitorIngress defines the pulsar cluster exposed",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enable": {
						SchemaProps: spec.SchemaProps{
							Description: "enable ingress",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Ingress additional annotation",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_PodPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodPolicy defines the common pod configuration for Pods, including when used in deployments, stateful-sets, etc.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the pulsar cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "The scheduling constraints on pods.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"components": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the resource requirements for the container. This field cannot be updated once the cluster is created.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations specifies the pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the container. This field cannot be updated.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations specifies the annotations to attach to pods the operator creates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "SecurityContext specifies the security context for the entire pod More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"terminationGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "TerminationGracePeriodSeconds is the amount of time that kubernetes will give for a pod instance to shutdown normally. The default value is 1800.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Prometheus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pulsar cluster prometheus spec",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host (DEPRECATED) is the expected host of the pulsar prometheus.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePort (DEPRECATED) is the expected port of the pulsar prometheus.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Proxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Proxy defines the desired state of Proxy",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the  container image. default is apachepulsar/pulsar:latest",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the proxy cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size (DEPRECATED) is the expected size of the proxy cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod defines the policy to create pod for the proxy cluster.\n\nUpdating the pod does not take effect on any existing pods.",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_PulsarCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PulsarCluster is the Schema for the pulsarclusters API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterSpec", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PulsarClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_PulsarClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PulsarClusterSpec defines the desired state of PulsarCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"zookeeper": {
						SchemaProps: spec.SchemaProps{
							Description: "Zookeeper defines the desired state of Zookeeper",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Zookeeper"),
						},
					},
					"bookie": {
						SchemaProps: spec.SchemaProps{
							Description: "Bookie defines the desired state of Bookie",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Bookie"),
						},
					},
					"broker": {
						SchemaProps: spec.SchemaProps{
							Description: "Broker defines the desired state of Broker",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Broker"),
						},
					},
					"proxy": {
						SchemaProps: spec.SchemaProps{
							Description: "Proxy defines the desired state of Proxy",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Proxy"),
						},
					},
					"monitor": {
						SchemaProps: spec.SchemaProps{
							Description: "Monitor defines the desired state of Monitor",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Monitor"),
						},
					},
					"manager": {
						SchemaProps: spec.SchemaProps{
							Description: "Manager defines the desired state of Manager",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Manager"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Bookie", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Broker", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Manager", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Monitor", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Proxy", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.Zookeeper"},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_PulsarClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PulsarClusterStatus defines the observed state of PulsarCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Pulsar cluster phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_pulsar_v1alpha1_Zookeeper(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Zookeeper defines the desired state of Zookeeper",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the  container image. default is apachepulsar/pulsar-all:latest",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels specifies the labels to attach to pods the operator creates for the zookeeper cluster.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size (DEPRECATED) is the expected size of the zookeeper cluster.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"pod": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod defines the policy to create pod for the zookeeper cluster.\n\nUpdating the pod does not take effect on any existing pods.",
							Ref:         ref("github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.ContainerImage", "github.com/sky-big/pulsar-operator/pkg/apis/pulsar/v1alpha1.PodPolicy"},
	}
}
